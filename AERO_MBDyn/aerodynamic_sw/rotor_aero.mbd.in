begin: data;
        problem: initial value;
end: data;

#beginpreprocess
from __future__ import print_function, division
from MBDynLib import *
import numpy as np
#nodes = []
#bodies = []
#joints = []
#shells = []
#beams = []

### DATA START HERE

# define here the desired number of blades (>= 4)
print("### TO CHANGE `N_B', THE NUMBER OF BLADES, GO BACK TO `rotor_aero.mbd.in', CHANGE `N_B THERE', AND RUN\n###\n###    python MBDynPreprocess.py rotor_aero.mbd.in > rotor_aero.mbd\n###");
N_B = 4;
Delta_psi = 2*np.pi/N_B
ConstMBVar('N_B', 'integer', N_B)
print('set: const real DELTAPSI=2*pi/N_B;',sep='');
#ConstMBVar('DELTAPSI','real', Delta_psi)
#endpreprocess

# basic main rotor data
set: ifndef const real OMEGA_100 = 40.; # rad/s should be ok
set: ifndef const real R = 5.5; # m; check
set: real OMEGA_0 = OMEGA_100;

# Degrees of freedom of rotor

#beginpreprocess
SWASHPLATE = 0
print("set: ifndef const integer SWASHPLATE ="+str(SWASHPLATE) +";")
if SWASHPLATE == 0:
	print("set: ifndef const integer PITCH = 1;")
else:
	print("set: ifndef const integer PITCH = 0;")
#endpreprocess

set: ifndef const integer FLAP = 0;
set: ifndef const integer LAG = 0;
# blade
set: const real SIGMA = 0.08;


/*
### v = 0 m/s, HOVER
set: ifndef const real V_INF = 0.; # m/s
set: ifndef const real ALTITUDE = 0.; # m, for standard air
set: ifndef const real ALPHA_H = 0.*deg2rad; # radian
set: ifndef const real INPUT_THETA_0 = 7.6678*deg2rad; # radian
set: ifndef const real INPUT_A_1_H = 0.*deg2rad; # radian
set: ifndef const real INPUT_B_1_H = 0.*deg2rad; # radian
*/


### v = 75 m/s, FORWARD FLIGHT (untrimmed)
set: ifndef const real V_INF = 75.; # m/s
set: ifndef const real ALTITUDE = 0.; # m, for standard air
set: ifndef const real ALPHA_H = 2.41172*deg2rad; # radian
set: ifndef const real INPUT_THETA_0 = 6.54609*deg2rad; # radian
set: ifndef const real INPUT_A_1_H = 0.*deg2rad; # radian
set: ifndef const real INPUT_B_1_H = 5.70475*deg2rad; # radian

/*
### v = 75 m/s, FORWARD FLIGHT (trimmed)
set: ifndef const real V_INF = 75.; # m/s
set: ifndef const real ALTITUDE = 0.; # m, for standard air
set: ifndef const real ALPHA_H = 2.41172*deg2rad; # radian
set: ifndef const real INPUT_THETA_0 = 6.54609*deg2rad; # radian
set: ifndef const real INPUT_A_1_H = 0.*deg2rad; # radian
set: ifndef const real INPUT_B_1_H = 5.70475*deg2rad; # radian
*/

#beginpreprocess
## Damping mechanism
# 0 : Standard mechanism
# 1 : Interblade mechanism
# 2 : i2b mechanism
DAMP = 2.;
print("set: ifndef const real DAMP = ", DAMP, ";",sep='');

if DAMP==0:
	adj = 0
	suff = "std"
elif DAMP==1:
	adj = 1
	suff = "ib"
else:
	adj = 2
	suff = "i2b"

#endpreprocess

#beginpreprocess
# Select constitutive law
# * 1 : nlvisocus with tanh
# * 0 : linear viscoelastic
FRICTION = 0.
#endpreprocess

### aero
set: const real R_CUTOUT = .2*R; # m
set: const real CHORD = SIGMA*pi*R/N_B; # m; rectangular blade
set: const real BLADE_TWIST = 0*4.*deg2rad; # radian, root to tip twist (positive when reduces towards the tip)

# parameters
set: const integer N_STEPS_PER_REV = 256;
set: const integer N_GAUSS_POINTS_AERO = 5;
set: const real T_REV =  2*pi/OMEGA_100;
set: const real dt =  2*pi/OMEGA_100/N_STEPS_PER_REV;
set: ifndef const real N_PER = 50;
begin: initial value;
        initial time: 0.; 
		final time: N_PER*T_REV;
		time step: dt;
	# Pay attention to the numerical method, due to the high couplings between pitch and lag, the ib for the ms numerical method may not converge.
	# In such cases the bdf method or a smaller spectral radius may suffice.
	method: ms, 0.6; # spectral radius
	# method: bdf;
        tolerance: 1.e-5;
        max iterations: 20, at most;
        derivatives tolerance: 1e-1;
		#derivatives coefficient: 1.e-8;

	linear solver: naive, colamd, pivot factor, 1.;
        # output: iterations;
        # output: residual;
end: initial value;

#beginpreprocess
if DAMP == 2:
	print("set: const integer AJ = 6;")
	print("set: const integer AN = 4;")
else:
	print("set: const integer AJ = 0;")
	print("set: const integer AN = 0;")

if SWASHPLATE == 1:
	print("set: const integer AN_SW = 2;")
	#print("set: const integer AB_SW = 2;")
	print("set: const integer AJ_SW = 3;")
	print("set: const integer PL_SW = 1;")
else:
	print("set: const integer AN_SW = 0;")
	#print("set: const integer AB_SW = 0;")
	print("set: const integer AJ_SW = 0;")
	print("set: const integer PL_SW = 0;")
#endpreprocess

begin: control data;
    structural nodes:
    +1          # Airframe
	+1			# Hub
	+AN_SW		# Fixed swashplate, Rotating swashplate
    +N_B*(
        +1		# Rigid blades
		+1		# Dummy nodes at tip
		+AN		# Additional nodes     
    )
    ;

	rigid bodies:
		# +1		# Airframe
		+1			# Hub
		# +AB_SW		# fixed swashplate, rotating swashplate
		+N_B*(
			+1		# Rigid blade
			+AN		# Additional bodies
		)
	;
    joints:
		+1		# Airframe clamp
		+1		# Hub rotation
		+AJ_SW	# Fixed swashplate, Rotating to fixed swashplate, Rotating swashplate to hub
    +N_B*(
        +1      # Blade hinge
        +1      # Elastomeric hinge
		+AJ		# Additional Joints
		+PL_SW	# pitch link
		+1		# Additional b2h damper
    )
    ;
	
	
	### aero
	
	air properties;
	induced velocity elements: 1;
	aerodynamic elements:
		+N_B*(
			+1	# aerodynamic body
		)
	;
	### aero
	
	title: "Airborne of Hammond Rotor";
	output meter: string, "Time >= (N_PER-5)*T_REV";
	#print: dof description;
	#print: all;
	default output: reference frames;
	output results: netcdf, no text;
end: control data;

# Begin numbering segment
set: const integer GROUND = 0;
set: const integer IC = 50;
set: const integer AIRFRAME = 100;
set: const integer HUB = 10000;
set: const integer SWASHPLATE_FIXED = HUB + 10;
set: const integer SWASHPLATE_ROTATING = HUB + 20;
set: const integer BLADE_FLAP_OFFSET = 30;
set: const integer BLADE_CM = 40;
set: const integer BLADE_TIP = 44;
set: const integer PITCH_LINK = 50;
set: const integer PITCH_LINK_TOP = PITCH_LINK + 1;
set: const integer PITCH_LINK_BOTTOM = PITCH_LINK + 2;
set: const integer A_NOD = 61 ;
set: const integer B_NOD = 62 ;
set: const integer C_NOD = 70 ;

#beginpreprocess
for b in range(N_B):
	print("set: const integer BLADE_", (b+1), " = HUB + 1000*", (b+1), ";",sep='');
print("");
#endpreprocess

# variable assigned for blade index
set: integer BLADE;
# this variable will be assigned the value of the current blade's label
set: integer CURR_BLADE;
# Variable assigned to adjacent blade's label (for ib or i2b)
set: integer NXT_BLADE;
#beginpreprocess
if DAMP==2:
	print("# Variable assigned to intermediate blade's label (for i2b)");
	print("set: integer INT_BLADE;")
#endpreprocess


# Hub properties
# * position
set: const real Z_HUB = 2.0; # m, relative to airframe
set: const real Z_SWASHPLATE = -0.3; # m, relative to hub
# * interia
set: const real M_HUB = 1.; # kg; define
set: const real J_HUB_X = 1.; # kg m^2; define
set: const real J_HUB_Z = 2.; # kg m^2; define

# Blade properties
# * position (w.r.t Hub)
set: ifndef const real X_BLADE_FLAP_OFFSET = 0.04*R; # [m]; define
set: const real X_BLADE_CM = 0.5*(R - X_BLADE_FLAP_OFFSET); # m; define

# ------------ NOVEL BLADE MODEL ---------------
#	X_BLADE_FLAP_OFFSET
#  <------------>
#
#	c_bar	c
#  <-----|------>
#  	   d
#	  <-->
#				o							^
#	   o		|	___________________		|	a
#		\		|	|					\	|
#  o-----o======o---|					|	-
#		/		|	|					|	|
#	   o		|	--------------------	|	b
#				0							v
#	  <-->
#	   f
#
#beginpreprocess
if DAMP!=0:
	print("# Front chordwise bar")
	print("set: ifndef const real A_BAR = X_BLADE_FLAP_OFFSET/2;	# [m]; define")
	print("# Rear chordwise bar")
	print("set: ifndef const real B_BAR = X_BLADE_FLAP_OFFSET/2;	# [m]; define")
	print("# Cylindrical damper position")
	print("set: ifndef const real C_BAR = X_BLADE_FLAP_OFFSET/4;	# [m]; define")
	print("set: ifndef const real C_BARA = X_BLADE_FLAP_OFFSET/4;					# [m]; define")
	print("set: ifndef const real C_BARB = C_BARA;					# [m]; define")

#endpreprocess

#beginpreprocess
if DAMP ==1:
	print("set: real GAMMA_A = atan(A_BAR/C_BARA);")
	print("set: real GAMMA_B = atan(B_BAR/C_BARB);")
	print("set: real A_BARP = sqrt(A_BAR^2+C_BARA^2);")
	print("set: real B_BARP = sqrt(B_BAR^2+C_BARB^2);")
	print("set: real PHI = (pi-DELTAPSI)/2;")
	print("set: real ALPHA2 = PHI+GAMMA_A;")
	print("set: real BETA = PHI+GAMMA_B;")
	print("set: real LE = X_BLADE_FLAP_OFFSET*sin(DELTAPSI)/sin(PHI);")
	print("set: real D1 = (B_BARP*sin(BETA)-A_BARP*sin(ALPHA2))^2;")
	print("set: real D2 = (LE+B_BARP*cos(BETA)+A_BARP*cos(ALPHA2))^2;")
	print("set: real L = sqrt(D1 + D2);")
elif DAMP==2:
	print("set: const integer D_NOD = 80 ;") 
	print("set: const integer BD_ROD = 85 ;")
	print("set: const integer BD_LINK = 82;")
	print("set: ifndef const real D_BAR = X_BLADE_FLAP_OFFSET/2;	# [m]; define")
	
	print("set: const integer F_NOD = 90 ;")
	print("set: const integer AF_ROD = 95 ;")
	print("set: const integer AF_LINK = 92;")
	print("set: ifndef const real F_BAR = X_BLADE_FLAP_OFFSET/2;	# [m]; define") 

	print("set: real X_AF = ( X_BLADE_FLAP_OFFSET-C_BAR-F_BAR)*cos(DELTAPSI)-(X_BLADE_FLAP_OFFSET+C_BARA);")
	print("set: real Y_AF = ( X_BLADE_FLAP_OFFSET-C_BAR-F_BAR)*sin(DELTAPSI)-(A_BAR);")
	print("set: real Z_AF = 0.;")

	print("set: real X_BD = ( X_BLADE_FLAP_OFFSET-C_BAR-D_BAR)*cos(DELTAPSI)-(X_BLADE_FLAP_OFFSET+C_BARB);")
	print("set: real Y_BD = -( X_BLADE_FLAP_OFFSET-C_BAR-D_BAR)*sin(DELTAPSI)+(B_BAR);")
	print("set: real Z_BD = 0.;")
#endpreprocess

# * inertia properties
set: ifndef const real M_BLADE = 94.9; # [kg]; define
set: ifndef const real S_BLADE_Z = 289.1; # [kg m]; define
set: const real X_BLADE_CM_REL = S_BLADE_Z/M_BLADE; # [m]; define

set: ifndef const real J_BLADE_Z = 1084.7; # [kg m^2]
# For uniform blades these two definitions are equivalent, but the latter is more correct for a generic mass distribution
# The additional contribution of the J_x is due to the tennis raquet effect
#set: const real J_BLADE_CM_Z = M_BLADE*R^2/12 + J_BLADE_CM_X; # kg m^2; define 
set: const real J_BLADE_CM_X = M_BLADE*(CHORD/2)^2/12; # kg m^2; define M_BLADE*(CHORD/2)^2/12; # kg m^2; define 
set: const real J_BLADE_CM_Z = J_BLADE_Z - S_BLADE_Z*X_BLADE_CM_REL+J_BLADE_CM_X; # [kg m^2];    
set: const real J_BLADE_CM_Y = J_BLADE_Z - S_BLADE_Z*X_BLADE_CM_REL; # kg m^2; define M_BLADE*R^2/12; # kg m^2; define   

# * equivalent (visco)elastic properties of elastomeric hinge
set: const integer CL_BLADE_ROOT_FRIC = 97;
set: const integer CL_BLADE_ROOT_OK = 98;
set: const integer CL_BLADE_ROOT_FAILED = 99;
set: integer CURR_CL_BLADE_ROOT;
set: const real K_BLADE_ROOT_X = 0.;
set: const real K_BLADE_ROOT_Y = 0.;
set: const real K_BLADE_ROOT_Z = 0.;
# Factor for the equivalence between std, ib and i2b damping ratios
set: real FACT;
set: real C_BLADE_ROOT_Z;
#beginpreprocess
C_Mz = 4067.5
if DAMP ==1:
	print("set: FACT = (2*(1-cos(DELTAPSI)))^(-1);")
	print("set: C_BLADE_ROOT_Z = 4067.5;")
	print("set: ifndef const real GEOMIB = 0.0778^2;")
	print("set: const real C_D = C_BLADE_ROOT_Z*FACT/GEOMIB;")
	print("set: const real C_BLADE_ROOT_X = 0. ;")
	print("set: const real C_BLADE_ROOT_Y = 0. ;")
	
elif DAMP==0:
	print("set: FACT = 1;")
	print("set: const real C_BLADE_ROOT_X = 0.;")
	print("set: const real C_BLADE_ROOT_Y = 0.;")
	print("set: C_BLADE_ROOT_Z = 4067.5*FACT;")
elif DAMP==2:
	print("set: const real C_BLADE_ROOT_X = 0.;")
	print("set: const real C_BLADE_ROOT_Y = 0.;")
	print("set: FACT = (2*(1-cos(2*DELTAPSI)))^(-1);")
	print("set: ifndef const real GEOM = 9^2/10^2;")
	if N_B==4:
		print("set: C_BLADE_ROOT_Z =  4067.5*FACT/GEOM;")
	elif N_B==5:
		print("set: C_BLADE_ROOT_Z = 4067.5*FACT/GEOM;")
#endpreprocess
# More sophisticated definition of the damping values
/*
set: const real LEAD_LAG_CSI = 0.3;
set: const real LEAD_LAG_OMEGA = sqrt(3./2*X_BLADE_FLAP_OFFSET/R)*OMEGA_100;
set: const real LEAD_LAG_DAMPER_C = 2*LEAD_LAG_CSI*LEAD_LAG_OMEGA*(J_BLADE_CM_Z + M_BLADE*X_BLADE_CM^2);
*/
#beginpreprocess
if FRICTION ==1:
	print("# NL viscous damper")
	print("# Define the N.L viscous law parameters F_d = f*tanh(alpha*epsprime)")
	print("set: ifndef const real ALPHA = 10.;			# Angular velocity multiplier")
	if DAMP == 0:
		print("set: const real ALPHA_STAR = ALPHA;")
	elif DAMP ==1:
		print("set: const real ALPHA_STAR = ALPHA/sqrt(GEOMIB);")
	elif DAMP ==2:
		print("set: const real ALPHA_STAR = ALPHA/sqrt(GEOM);")
	print("# By means of an equivalent viscous damping f is obtained to Match Hammond's C_xi = 4067.5")
	print("set: ifndef const real f = 3515.3893;			# Angular velocity multiplier")
	print("set: const real f_star = f*FACT;				# Corrected damping factor by Deutsch criterion")
	print("# Scalar functions")
	print("#scalar function: \"alpha\",const,ALPHA_STAR;")
	print("scalar function: \"f\",const,f_star;")
	print("scalar function: \"exp_p\",exp, coefficient, ALPHA_STAR,1.; # e**(alpha*x)")
	print("scalar function: \"exp_m\",exp, coefficient, -1*ALPHA_STAR,1.; # e**(-alpha*x)")
	print("scalar function: \"num\",sub,\"exp_p\",\"exp_m\";# e**x-e**-x")
	print("scalar function: \"den\",sum,\"exp_p\",\"exp_m\";# e**x+e**-x")
	print("scalar function: \"tanh\",div,\"num\",\"den\";# tanh= (e**x-e**-x) / (e**x+e**-x)")
	print("scalar function: \"nlvisc\",mul,\"f\",\"tanh\";")
	if DAMP ==1:
		print("scalar function: \"L0\",const,L;")
		print("scalar function: \"nlvisc_rod\",mul,\"L0\",\"nlvisc\";")


	print("# Friction damper constitutive law")
	print("constitutive law: CL_BLADE_ROOT_FRIC,3,nlsf viscous,null,null,null,\"nlvisc\";")
#endpreprocess
# Operative damper constitutive law
constitutive law: CL_BLADE_ROOT_OK, 3,
		linear viscoelastic generic,
			diag, K_BLADE_ROOT_X, K_BLADE_ROOT_Y, K_BLADE_ROOT_Z,
			diag, C_BLADE_ROOT_X, C_BLADE_ROOT_Y, C_BLADE_ROOT_Z;
# Inoperative damper constitutive law
constitutive law: CL_BLADE_ROOT_FAILED, 3,
		linear viscoelastic generic,
			diag, K_BLADE_ROOT_X, K_BLADE_ROOT_Y, K_BLADE_ROOT_Z,
			diag, C_BLADE_ROOT_X, C_BLADE_ROOT_Y, 0.; # failed damper

# Additional subcritical damping to eliminate transient 
set: ifndef const real ACTIVE = 1.; 
set: real C_XI = 1500.; 
set: real T_I = 20*T_REV; 
set: real DUR = 16*T_REV; 
set: const integer SUBCRITICAL_DAMP_CL = 33; 
# Operative damper constitutive law  
constitutive law: SUBCRITICAL_DAMP_CL, 3, 
		drive caller wrapper, 
		step5,T_I,1,T_I+DUR,0., 
		#ramp, -C_XI/DUR,T_I,T_I+DUR,C_XI, 
		linear viscous generic, 
			diag, 0., 0., ACTIVE*C_XI;

#beginpreprocess
if SWASHPLATE == 1:
	print("include: \"swashplate.mbd\";")
#endpreprocess

### aero

# Aerodynamic data
set: const integer NACA0012 = 12; # label of aerodynamic data
c81 data: NACA0012, "naca0012.c81"; # aerodynamic data (the file "naca0012.c81" is in MBDyn's var/ folder

### aero


# Reference frames definition

reference: GROUND,
  reference, global, null,		# position
  reference, global, eye,		# orientation
  reference, global, null,		# velocity
  reference, global, null;		# angular velocity

reference: AIRFRAME,
	reference, GROUND, null,
	reference, GROUND, eye,
/*
	reference, GROUND,
		2, 0., 1., 0.,
		1., cos(GAMMA), 0., sin(GAMMA),
*/
	reference, GROUND, null,
	reference, GROUND, null;

reference: HUB,
	reference, AIRFRAME, 0., 0., Z_HUB,
	reference, AIRFRAME, eye,
	reference, AIRFRAME, null,
	reference, AIRFRAME, 0., 0., OMEGA_0;


#beginpreprocess
if SWASHPLATE == 1:
	print("include: \"swashplate.ref\";")
#endpreprocess

# Python subscript for automatic reference frame creation in blades
#beginpreprocess

for b in range(1,N_B+1):
	curr_blade = b
	print("set: CURR_BLADE = BLADE_", curr_blade, ";",sep='');
	print("# Standard reference frames")
	print("include: \"rotor_blade.ref\";");
	if SWASHPLATE == 1:
		print("include: \"additional_sw.ref\";")

	if DAMP != 0:
		print("# Additional reference frames")
		print("include: \"additional_"+suff+".ref\";");
#endpreprocess

# create nodes, joints etc.
begin: nodes;
	# Symbolic ground node
	structural: AIRFRAME, static,
		reference, AIRFRAME, null,
		reference, AIRFRAME, eye,
		reference, AIRFRAME, null,
		reference, AIRFRAME, null;

	structural: HUB, dynamic,
		reference, HUB, null,
		reference, HUB, eye,
		reference, HUB, null,
		reference, HUB, null;
	
#beginpreprocess
if SWASHPLATE == 1:
	print("include: \"swashplate.nod\";")
#endpreprocess
	
	# Blade nodes
#beginpreprocess


for b in range(1,N_B+1):
	curr_blade = b
	nxt_blade = (b+2) % N_B
	if nxt_blade== 0:
		nxt_blade = N_B

	print("set: CURR_BLADE = BLADE_", curr_blade, ";",sep='');
	print("# Structural node of the blade")
	print("	include: \"rotor_blade.nod\";");
	if DAMP==2:
		print("# Additional nodes for the i2b")
		print("	include: \"additional_"+suff+".nod\";");
#[print(d) for d in nodes]
#endpreprocess
end: nodes;

begin: elements;

	body: HUB, HUB,
		M_HUB,
		null,
		diag, J_HUB_X, J_HUB_X, J_HUB_Z;
	# clamp airframe
	joint: AIRFRAME, clamp, AIRFRAME, node, node;
	
	# airframe-hub joint
	joint: HUB, total joint,
		AIRFRAME,	# label of node #1
			position, reference, HUB, null,
			position orientation, reference, AIRFRAME, eye,
			rotation orientation, reference, AIRFRAME, eye,
		HUB,
			position, reference, HUB, null,
			position orientation, reference, HUB, eye,
			rotation orientation, reference, HUB, eye,
		position constraint, 
			1,					# X-translation
			1,					# Y-translation 
			1,					# Z-translation
			null,				# Imposed relative position
		# Build up movement of rotor rotation
		orientation constraint, 1, 1, 1, 0., 0., 1., linear, 0., OMEGA_0;
		# Rotor starts at fixed angular speed
		#orientation constraint, 1,1,angular velocity,0., 0., 1., const, OMEGA_0;
#beginpreprocess
if SWASHPLATE == 1:
	print("include: \"swashplate.elm\";")
#endpreprocess
	
	
	### aero
	air properties: std, SI,
		reference altitude, ALTITUDE,
		single,
			# NOTE: for convenience, mount the rotor with vertical shaft and put gamma + tau in alpha_H
			cos(ALPHA_H), 0., -sin(ALPHA_H),
			# const, 0.;
			cosine, 0., pi/.2, V_INF/2, half, 0.;
	induced velocity: 99, rotor,
		AIRFRAME,
		HUB,
		induced velocity,
			# no;
			uniform, OMEGA_100, R, max iterations, 10, tolerance, 1e-3, delay, .9;
	### aero
	
	
	# Hub-blade conections and dampers
#beginpreprocess

for b in range(1,N_B+1):
	curr_blade = b

	nxt_blade = (b+adj) % N_B
	if nxt_blade== 0:
		nxt_blade = N_B

	int_blade = (b+adj-1) % N_B
	if int_blade== 0:
		int_blade = N_B
	print("set: BLADE = ",curr_blade, ";",sep='');
	print("set: CURR_BLADE = BLADE_", curr_blade, ";",sep='');
	if DAMP==2:
		print("set: INT_BLADE = BLADE_", int_blade, ";",sep='');
	else:
		print("set: NXT_BLADE = BLADE_", nxt_blade, ";",sep='');
	if DAMP != 2.:
		if FRICTION==1.:
			print("set: CURR_CL_BLADE_ROOT = CL_BLADE_ROOT_FRIC;",sep='');
		else:
			print("set: CURR_CL_BLADE_ROOT = CL_BLADE_ROOT_OK;",sep='');
	
	print("# Blade body and total joint to hub")
	print("	include: \"rotor_blade.elm\";");
	if SWASHPLATE == 1:
		print("	include: \"additional_sw.elm\";");
	
	print("	include: \"rotor_blade_aero.elm\";");
	print("# Damping mechanism for std and ib, additional elements for i2b")
	if FRICTION==1. and DAMP==1.:
		print("	include: \"additional_"+suff+"_fr.elm\";");
	else:
		print("	include: \"additional_"+suff+".elm\";");

if DAMP ==2:
	for b in range(1,N_B+1):
		curr_blade = b
		if FRICTION==1.:
			print("set: CURR_CL_BLADE_ROOT = CL_BLADE_ROOT_FRIC;",sep='');
		else:
			print("set: CURR_CL_BLADE_ROOT = CL_BLADE_ROOT_OK;",sep='');
		print("set: CURR_BLADE = BLADE_", curr_blade, ";",sep='');
		print("	include: \"additional_"+suff+"_p2.elm\";");

for b in range(1,N_B+1):
		curr_blade = b
		print("set: CURR_BLADE = BLADE_", curr_blade, ";",sep='');
		print(" include: \"b2h_hinge.elm\";")
#[print(d) for d in bodies]
#[print(d) for d in joints]
#endpreprocess

	inertia: 0,
			position, reference, BLADE_1 + BLADE_FLAP_OFFSET, null,
			orientation, reference, BLADE_1 + BLADE_FLAP_OFFSET, eye,
			body, BLADE_1;
end: elements;
